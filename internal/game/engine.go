package game

import (
	"math/rand"
	"three_in_row/internal/field"
	"three_in_row/internal/rules"
	"time"
)

type (
	GameEngine struct {
		rules []rules.GameRule
	}
)

func NewGameEngine(rules []rules.GameRule) *GameEngine {
	return &GameEngine{rules: rules}
}

func (g *GameEngine) ApplyRules(f field.Field) Status {
	for _, rule := range g.rules {
		changed, err := rule.Apply(f)
		if err != nil {
			return Error
		}
		if changed {
			return RulesApplied
		}
	}
	return NothingChanged
}

func (g *GameEngine) FillField(f field.Field) {
	cells := f.Cells()
	if len(cells) == 0 || len(cells[0]) == 0 {
		return // –ü–æ–ª–µ –ø—É—Å—Ç–æ–µ, –Ω–µ—á–µ–≥–æ –∑–∞–ø–æ–ª–Ω—è—Ç—å
	}

	elements := []string{"üòÄ", "ü•µ", "ü•∂", "ü§¢", "üòà"}
	r := rand.New(rand.NewSource(time.Now().UnixNano()))

	newCells := make([][]string, len(cells))
	for y := range cells {
		newCells[y] = make([]string, len(cells[y]))
		for x := range cells[y] {
			if cells[y][x] == "" {
				newCells[y][x] = elements[r.Intn(len(elements))]
			} else {
				newCells[y][x] = cells[y][x]
			}
		}
	}

	err := f.UpdateCells(newCells)
	if err != nil {
		// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–ª–µ
		// –í –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ –º—ã –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –Ω–æ –≤—ã –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –µ—ë –ø–æ-–¥—Ä—É–≥–æ–º—É
		println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—è:", err.Error())
	}
}

func (g *GameEngine) Input(data InputData) error {
	//TODO implement me
	panic("implement me")
}
